Интерфејси -- задаци
====================

1. Гласни и покретни објекти
----------------------------


.. questionnote::

    Написати најједноставније могуће интерфејсе и класе који су довољни да следећи програм 
    може да се изврши.

    .. activecode:: interfejsi_glasan_pokretan_zad
        :passivecode: true
        :includesrc: src/zadaci/interfejsi_glasan_pokretan_zad.cs

    Извршавањем овог програма треба да се добије следећи излаз:
    
    .. code::

        Glasovi glasnih:
                pas: av av
                motorna testera: vruum
        Brzine pokretnih:
                pas: 36Km/h
                bicikl: 50Km/h

.. collapse:: Упутство

    Интерфејс ``IGlasan`` треба да има само метод ``string Zvuk()``, а интерфејс ``IPokretan`` 
    само метод ``double Brzina()`` (или ``int Brzina()``). 
    
    Класа ``Pas`` треба да имплементира оба интерфејса, класа ``MotornaTestera`` само интерфејс 
    ``IGlasan``, а класа ``Bicikl`` само интерфејс ``IPokretan``. Поред тога, свака од ове три 
    класе треба да редефинише метод ``ToString`` користећи кључну реч ``override``.
   

2. Упоредиви велики бројеви
---------------------------

.. questionnote::

    Написати класу ``VelikiBroj`` која омогућава правилно поређење 
    бројева са великим бројем цифара. Класу написати тако да следећи програм може да се изврши:

    .. activecode:: poredjenje_velikih_brojeva
        :passivecode: true

        public class Program
        {
            public static void Main(string[] args)
            {
                List<VelikiBroj> brojevi = new List<VelikiBroj>();
                brojevi.Add(new VelikiBroj("-123"));
                brojevi.Add(new VelikiBroj("-12"));
                brojevi.Add(new VelikiBroj("-125"));
                brojevi.Add(new VelikiBroj("0"));
                brojevi.Add(new VelikiBroj("2500"));
                brojevi.Add(new VelikiBroj("251"));
                brojevi.Add(new VelikiBroj("263"));

                brojevi.Sort();
                foreach (var broj in brojevi)
                    Console.WriteLine(broj);
            }
        }

    Извршавањем овог програма треба да се добије следећи излаз:
    
    .. code::

        -125
        -123
        -12
        0
        251
        263
        2500
        
    Напомена: У комплетној класи требало би написати бар још и операторе за сабирање, одузимање и 
    множење, али то није тема овог задатака.

.. collapse:: Упутство

    Класа ``VelikiBroj`` треба да имплементира интерфејс ``IComparable``. Знак и цифре броја могу 
    заједно да се чувају у приватној ниски ``cifre``. Написати одговарајући метод ``ToString()``.
    Приликом поређења два броја (задата помоћу ниски), у методу ``CompareTo`` водити рачуна о 
    следећем: 
    
    - ако су оба броја негативна, резултат поређења је обрнут од оног који се добија поређењем тих 
      бројева без предзнака. 
    - ако је само један број негативан, он је мањи. 
    - ако су оба броја позитивна, мањи је онај који има мање цифара. 
    - ако су оба броја позитивна и имају једнак број цифара, мањи по вредности је уједно и 
      лексикографски мањи, тј. бројеви могу да се пореде као ниске. 

3. Фибоначијев низ
------------------

.. questionnote::

    Написати метод који **генерише** колекцију Фибоначијевих бројева 
    :math:`1, 1, 2, 3, 5, 8 \ldots`, све до задате границе. Као што је познато, сваки Фибоначијев 
    број (осим прва два) добија се као збир претходна два. Написати и програм, који помоћу овог 
    метода исписује све Фибоначијеве бројеве мање од милион. Ни метод који генерише колекцију, ни 
    метод који је користи, не треба да чувају елементе колекције. 

.. collapse:: Упутство

    Метод треба да враћа референцу на интерфејс ``IEnumerable<int>``. Довољно је да метод памти два 
    узастопна елемента Фибоначијевог низа, да у петљи враћа следећи елемент помоћу наредбе ``yield 
    return`` и (у истој петљи) да израчунава нови пар узастопних елемената.

4. Пермутације 
--------------

.. questionnote::

    Написати класу ``GeneratorPermutacija`` са методом ``Permutacije``, који 
    генерише колекцију ниски (стрингова) састављених од задатих карактера у свим могућим редоследима. 
    Класу написати тако да може да се изврши следећи програм:
    
    .. activecode:: generator_permutacija
        :passivecode: true
        
        public class Program
        {
            public static void Main(string[] args)
            {
                GeneratorPermutacija gp = new GeneratorPermutacija();
                foreach (string s in gp.Permutacije("sve"))
                    Console.WriteLine(s);
            }
        }

    Извршавањем програма треба да се добије следећи излаз, при чему ниске не морају да буду исписане 
    баш у овом редоследу: 
    
    .. code::
    
        sve
        sev
        vse
        ves
        evs
        esv

    Ни у класи чији метод генерише пермутације датих карактера, ни на месту употребе тог метода, генерисане 
    ниске не треба да се чувају.

.. comment

    Задатак 1 -- филтрирање дате колекције
    --------------------------------------

    .. questionnote::

        Написати метод који за дату колекцију целих бројева враћа колекцију позитивних бројева дате колекције.
        
    Програм који илуструје рад метода је већ написан. Он исписује елементе новодобијене колекције, збир 
    тих елемената и најмањи од тих елемената.
      
    .. activecode:: ienum02_pozitivni
        :passivecode: true
        :includesrc: src/primeri/ienum/ienum02_pozitivni-z.cs

    Након допуне траженог метода, програм треба да исписује 

    .. code::

        Pozitivni elementi kolekcije su 3 5 6 2 7. Njihov zbir je 23, a njihov min je 2.

    Исти ефекат би могао да се постигне применом метода ``Where``. Конкретније, након писања траженог метода 
    израз ``Pozitivni(pozNeg)`` треба да има исту вредност као израз ``pozNeg.Where(x => x > 0)``.






    .. questionnote::

        У више задатака до сада, бавили смо се класом која представља неку врсту колекције елемената. 
        Такви су, на пример, следећи задаци:

        - "Динамички сабирач" из лекције "Апстракција"
        - "Велики редак низ" из лекције "Апстракција"
        - "Ред без дупликата" из лекције "Генеричке класе"
        - "Стек са максимумом" из лекције "Генеричке класе"
        - "Фреквенцијски стек" из лекције "Генеричке класе"
        
        У неким од ових задатака смо помоћу индексера омогућили (или захтевали) да се инстанца класе 
        понаша као низ. Међутим, ни у једном од ових задатка није било речи о могућности да се 
        инстанца класе појави у наредби ``foreach`` на овакав начин:
        
        .. code-block:: csharp
        
            DinamickiSabirac ds = new DinamickiSabirac(int duzina);
            // ...
            
            foreach(double x in ds)
                Console.WriteLine(x);

        Истражите шта је потребно написати у дефиницији класе, да би објекат класе која представља 
        колекцију могао да се користи на описани начин. Покушајте да прилагодите класу из неког од 
        поменутих задатака, или неку нову класу, тако да објекти класе могу да се употребе у наредби 
        ``foreach``.

.. comment


    .. activecode:: ienum01b_generator_delioci1 
        :passivecode: true
        :includesrc: src/primeri/ienum/ienum01b_generator_delioci.cs

